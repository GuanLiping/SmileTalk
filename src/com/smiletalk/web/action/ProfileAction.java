/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.smiletalk.web.action;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.upload.FormFile;

import com.smiletalk.domain.City;
import com.smiletalk.domain.University;
import com.smiletalk.domain.User;
import com.smiletalk.domain.UserUniversity;
import com.smiletalk.service.inter.AlbumServiceInter;
import com.smiletalk.service.inter.ArticleServiceInter;
import com.smiletalk.service.inter.CityServiceInter;
import com.smiletalk.service.inter.FriendServiceInter;
import com.smiletalk.service.inter.GossipServiceInter;
import com.smiletalk.service.inter.UniversityServiceInter;
import com.smiletalk.service.inter.UserServiceInter;
import com.smiletalk.service.inter.UserUniversityServiceInter;
import com.smiletalk.utils.myTools;
import com.smiletalk.web.form.UserForm;

public class ProfileAction extends DispatchAction {
	
	private UserServiceInter userService;
	private AlbumServiceInter albumService;
	private ArticleServiceInter articleService;
	private GossipServiceInter gossipService;
	private CityServiceInter cityService;
	private UserUniversityServiceInter userUniversityService;
	private FriendServiceInter friendService;
	
	public void setFriendService(FriendServiceInter friendService) {
		this.friendService = friendService;
	}

	public void setGossipService(GossipServiceInter gossipService) {
		this.gossipService = gossipService;
	}

	public void setArticleService(ArticleServiceInter articleService) {
		this.articleService = articleService;
	}
	
	public void setUserUniversityService(
			UserUniversityServiceInter userUniversityService) {
		this.userUniversityService = userUniversityService;
	}

	public void setCityService(CityServiceInter cityService) {
		this.cityService = cityService;
	}

	public void setAlbumService(AlbumServiceInter albumService) {
		this.albumService = albumService;
	}

	public void setUserService(UserServiceInter userService) {
		this.userService = userService;
	}

	//jump to self main page
	public ActionForward goHomePageUI(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	
		User user=(User) request.getSession().getAttribute("user");	
		
        if(user.getCity().getCiId()==21){
			request.setAttribute("city", user.getOtherCityName());
		}else{			
			
			City city=(City)cityService.findById(City.class, Integer.valueOf(user.getCity().getCiId()));					
			request.setAttribute("city", city.getCiName());
		}
		
	
		List userUniversity=userUniversityService.getResult("from UserUniversity where user.userId=?", new Object[]{Integer.valueOf(user.getUserId())});
		UserUniversity useruniversity=(UserUniversity) userUniversity.get(0);
		request.setAttribute("university", useruniversity.getUniversity().getName());
		
		List albumList=albumService.getResult("from Album where user.userId=?", new Object[]{Integer.valueOf(user.getUserId())});
		request.setAttribute("albumList", albumList);
		
		List articleList=articleService.getResult("from Article where user.userId=?", new Object[]{Integer.valueOf(user.getUserId())});
		request.setAttribute("articleList", articleList);
		
		List gossipList=gossipService.getResult("from Gossip where getId=?", new Object[]{Integer.valueOf(user.getUserId())});
		request.setAttribute("gossipList", gossipList);
		
		List friendList=friendService.getResult("from Friend where hostId=?", new Object[]{Integer.valueOf(user.getUserId())});
		request.setAttribute("friendList", friendList);
		
		
		
		return mapping.findForward("goHomePageUI");
	}
	
	// dump to page upload profile picture
	public ActionForward UploadPhotoUI(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		return mapping.findForward("goUploadPhotoUI");
	}
	
	//upload profile picture
	public ActionForward uploadPhoto(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		UserForm userForm=(UserForm) form;
		FormFile myphoto=userForm.getMyphoto();
		User user=(User) request.getSession().getAttribute("user");
		
		//save picture to the user's own folder
		String newHeadPhoto=myTools.uploadHead(request, myphoto, user.getUserId()+"");
		
		//modify the name of the user		
		user.setPhoto(newHeadPhoto);
		userService.update(user);
		return mapping.findForward("goUploadPhotoUI");
	}
	
	
	public ActionForward BasicInfoUI(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("goBasicInfoUI");
	}
	
	public ActionForward ContactInfoUI(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("goContactInfoUI");
	}
	
	
	public ActionForward PersonalInfoUI(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("goPersonalInfoUI");
	}
	
	
	public ActionForward contactInfoUpdate(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		UserForm userForm=(UserForm) form;
		User user=(User) request.getSession().getAttribute("user");
		
		user.setMsn(userForm.getMsn());
		user.setMobile(userForm.getMobile());
		user.setWebsite(userForm.getWebsite());
	    
		userService.update(user);
		return mapping.findForward("goContactInfoUI");
	}
	
	public ActionForward personalInfoUpdate(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		UserForm userForm=(UserForm) form;
		User user=(User) request.getSession().getAttribute("user");
		user.setInterest(userForm.getInterest());
		user.setBook(userForm.getBook());
		user.setMusic(userForm.getMusic());
		user.setMovie(userForm.getMovie());
		user.setCartoon(userForm.getCartoon());
		user.setSport(userForm.getSport());
		user.setGame(userForm.getGame());
		user.setBook(userForm.getBook());
	    
		userService.update(user);
		return mapping.findForward("goPersonalInfoUI");
	}
	
	public ActionForward basicInfoUpdate(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		UserForm userForm=(UserForm) form;
		User user=(User) request.getSession().getAttribute("user");
		user.setName(userForm.getName());
		user.setSex(userForm.getSex());
		
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd"); 
		
		java.util.Date date;
		try {
			date = sdf.parse(userForm.getBirth());
			user.setBirth(date);
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		
        
		userService.update(user);
		return mapping.findForward("goBasicInfoUI");
	}
	
}