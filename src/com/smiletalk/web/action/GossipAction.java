/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.smiletalk.web.action;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.smiletalk.domain.City;
import com.smiletalk.domain.Gossip;
import com.smiletalk.domain.User;
import com.smiletalk.domain.UserUniversity;
import com.smiletalk.service.inter.AlbumServiceInter;
import com.smiletalk.service.inter.ArticleServiceInter;
import com.smiletalk.service.inter.CityServiceInter;
import com.smiletalk.service.inter.FriendServiceInter;
import com.smiletalk.service.inter.GossipServiceInter;
import com.smiletalk.service.inter.UserServiceInter;
import com.smiletalk.service.inter.UserUniversityServiceInter;
import com.smiletalk.web.form.GossipForm;

/** 
 * MyEclipse Struts
 * Creation date: 02-17-2013
 * 
 * XDoclet definition:
 * @struts.action parameter="flag"
 */
public class GossipAction extends DispatchAction {
	
	private FriendServiceInter friendService;
	private UserServiceInter userService;
	private AlbumServiceInter albumService;
	private ArticleServiceInter articleService;
	private GossipServiceInter gossipService;
	private CityServiceInter cityService;
	private UserUniversityServiceInter userUniversityService;
	public void setFriendService(FriendServiceInter friendService) {
		this.friendService = friendService;
	}

	public void setUserService(UserServiceInter userService) {
		this.userService = userService;
	}

	public void setAlbumService(AlbumServiceInter albumService) {
		this.albumService = albumService;
	}

	public void setArticleService(ArticleServiceInter articleService) {
		this.articleService = articleService;
	}

	public void setCityService(CityServiceInter cityService) {
		this.cityService = cityService;
	}

	public void setUserUniversityService(
			UserUniversityServiceInter userUniversityService) {
		this.userUniversityService = userUniversityService;
	}

	public void setGossipService(GossipServiceInter gossipService) {
		this.gossipService = gossipService;
	}

	public ActionForward friendAddGossip(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		
		 String gid=request.getParameter("gid");
		 User user=(User) request.getSession().getAttribute("user");
		 GossipForm gossipForm=(GossipForm) form;
		 
		 Gossip gossip=new Gossip();
		 gossip.setGetId(Integer.parseInt(gid));
		 gossip.setUser(user);
		 gossip.setIndate(new java.util.Date());
		 gossip.setContent(gossipForm.getContent());
		
		 gossipService.save(gossip);
		 
		 List gossipList=gossipService.getResult("from Gossip where getId=?", new Object[]{Integer.valueOf(gid)});
		 request.setAttribute("gossipList", gossipList);
		 
		 
		 User friend1=(User) userService.findById(User.class, Integer.parseInt(gid));
		 request.setAttribute("friend1", friend1);
		 
		 if(friend1.getCity().getCiId()==21){
				request.setAttribute("city", friend1.getOtherCityName());
			}else{			
				
				City city=(City)cityService.findById(City.class, Integer.valueOf(friend1.getCity().getCiId()));					
				request.setAttribute("city", city.getCiName());
			}
				
			List userUniversity=userUniversityService.getResult("from UserUniversity where user.userId=?", new Object[]{Integer.valueOf(friend1.getUserId())});
			UserUniversity useruniversity=(UserUniversity) userUniversity.get(0);
			request.setAttribute("university", useruniversity.getUniversity().getName());
			
			List albumList=albumService.getResult("from Album where user.userId=?", new Object[]{Integer.valueOf(friend1.getUserId())});
			request.setAttribute("albumList", albumList);
			
			List articleList=articleService.getResult("from Article where user.userId=?", new Object[]{Integer.valueOf(friend1.getUserId())});
			request.setAttribute("articleList", articleList);
			
			List friendList=friendService.getResult("from Friend where hostId=?", new Object[]{Integer.valueOf(friend1.getUserId())});
			request.setAttribute("friendList", friendList);
	
		   return mapping.findForward("goFriendHome");
		
	}
	
	
	public ActionForward selfAddGossip(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		 User user=(User) request.getSession().getAttribute("user");
		 GossipForm gossipForm=(GossipForm) form;
		 
		 Gossip gossip=new Gossip();
		 gossip.setGetId(user.getUserId());
		 gossip.setUser(user);
		 gossip.setIndate(new java.util.Date());
		 gossip.setContent(gossipForm.getContent());		
		 gossipService.save(gossip);
		
		 
		 
		 if(user.getCity().getCiId()==21){
				request.setAttribute("city", user.getOtherCityName());
			}else{			
				
				City city=(City)cityService.findById(City.class, Integer.valueOf(user.getCity().getCiId()));					
				request.setAttribute("city", city.getCiName());
			}
			
		
			List userUniversity=userUniversityService.getResult("from UserUniversity where user.userId=?", new Object[]{Integer.valueOf(user.getUserId())});
			UserUniversity useruniversity=(UserUniversity) userUniversity.get(0);
			request.setAttribute("university", useruniversity.getUniversity().getName());
			
			List albumList=albumService.getResult("from Album where user.userId=?", new Object[]{Integer.valueOf(user.getUserId())});
			request.setAttribute("albumList", albumList);
			
			List articleList=articleService.getResult("from Article where user.userId=?", new Object[]{Integer.valueOf(user.getUserId())});
			request.setAttribute("articleList", articleList);
			
			List gossipList=gossipService.getResult("from Gossip where getId=?", new Object[]{Integer.valueOf(user.getUserId())});
			request.setAttribute("gossipList", gossipList);
			
			List friendList=friendService.getResult("from Friend where hostId=?", new Object[]{Integer.valueOf(user.getUserId())});
			request.setAttribute("friendList", friendList);
		
		return mapping.findForward("goHomePage");
	}
	
	
	
	public ActionForward viewAllGossip(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		 
		User user=(User) request.getSession().getAttribute("user");
		
		String type=request.getParameter("type");
		
		List gossipList=gossipService.getResult("from Gossip where getId=?", new Object[]{Integer.valueOf(user.getUserId())});
		request.setAttribute("gossipList", gossipList);
		
		if(type.equals("self")){
		return mapping.findForward("goAllGossipUI");
		}else{
		return mapping.findForward("goFreindAllGossipUI");
		}
	}
	
	public ActionForward deleteGossip(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		User user=(User) request.getSession().getAttribute("user");
		
		String id=request.getParameter("id");
		
		System.out.print(id);
		Gossip gossip=(Gossip)gossipService.findById(Gossip.class, Integer.valueOf(id));						
	    gossipService.delete(gossip);
	    
	    
	    if(user.getCity().getCiId()==21){
			request.setAttribute("city", user.getOtherCityName());
		}else{			
			
			City city=(City)cityService.findById(City.class, Integer.valueOf(user.getCity().getCiId()));					
			request.setAttribute("city", city.getCiName());
		}
		
	
		List userUniversity=userUniversityService.getResult("from UserUniversity where user.userId=?", new Object[]{Integer.valueOf(user.getUserId())});
		UserUniversity useruniversity=(UserUniversity) userUniversity.get(0);
		request.setAttribute("university", useruniversity.getUniversity().getName());
		
		List albumList=albumService.getResult("from Album where user.userId=?", new Object[]{Integer.valueOf(user.getUserId())});
		request.setAttribute("albumList", albumList);
		
		List articleList=articleService.getResult("from Article where user.userId=?", new Object[]{Integer.valueOf(user.getUserId())});
		request.setAttribute("articleList", articleList);
		
		List gossipList=gossipService.getResult("from Gossip where getId=?", new Object[]{Integer.valueOf(user.getUserId())});
		request.setAttribute("gossipList", gossipList);
		
		List friendList=friendService.getResult("from Friend where hostId=?", new Object[]{Integer.valueOf(user.getUserId())});
		request.setAttribute("friendList", friendList);
	        
		return mapping.findForward("goHomePage");
	}
	
	
	
	
}