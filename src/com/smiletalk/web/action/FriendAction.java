/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.smiletalk.web.action;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.smiletalk.domain.City;
import com.smiletalk.domain.Friend;
import com.smiletalk.domain.User;
import com.smiletalk.domain.UserUniversity;
import com.smiletalk.service.inter.AlbumServiceInter;
import com.smiletalk.service.inter.ArticleServiceInter;
import com.smiletalk.service.inter.CityServiceInter;
import com.smiletalk.service.inter.FriendServiceInter;
import com.smiletalk.service.inter.GossipServiceInter;
import com.smiletalk.service.inter.UserServiceInter;
import com.smiletalk.service.inter.UserUniversityServiceInter;
import com.smiletalk.web.form.FriendForm;



public class FriendAction extends DispatchAction {
	
	
	private FriendServiceInter friendService;
	private UserServiceInter userService;
	private AlbumServiceInter albumService;
	private ArticleServiceInter articleService;
	private GossipServiceInter gossipService;
	private CityServiceInter cityService;
	private UserUniversityServiceInter userUniversityService;
	
	public void setUserService(UserServiceInter userService) {
		this.userService = userService;
	}

	public void setFriendService(FriendServiceInter friendService) {
		this.friendService = friendService;
	}

	public ActionForward addFriendUI(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		FriendForm friendForm=(FriendForm) form;
		List friendList=userService.getResult("from User where name=?", new Object[]{friendForm.getFriendName()});
		request.setAttribute("friendList", friendList);	
				
		return mapping.findForward("goShowSearchFriend");
	}
	
	
	public ActionForward gofAllFriend(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		 String fid=request.getParameter("fid");
		 
		 
		 List friendList=friendService.getResult("from Friend where hostId=?", new Object[]{Integer.valueOf(fid)});
		 request.setAttribute("friendList", friendList);	
			
		return mapping.findForward("goViewfAllFriendUI");
	}
		
	
	public ActionForward goAllFriend(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		User user=(User) request.getSession().getAttribute("user");
		
		
		List friendList=userService.getResult("from Friend where hostId=?", new Object[]{user.getUserId()});
		request.setAttribute("friendList", friendList);	
		
		return mapping.findForward("goViewAllFriendUI");
	}
	
	
	public ActionForward setBestfriend(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		User user=(User) request.getSession().getAttribute("user");
		FriendForm friendForm=(FriendForm) form;
		List friendList=friendService.getResult("from Friend where hostId=? and user.userId=?", new Object[]{user.getUserId(),Integer.valueOf(friendForm.getFriendId())});	
		Friend friend=(Friend)friendList.get(0);
		friend.setDescription(friendForm.getDescription());
		friend.setType(1);
		
		friendService.update(friend);
		
		friendList=friendService.getResult("from Friend where hostId=? and user.userId=?", new Object[]{user.getUserId(),Integer.valueOf(friendForm.getFriendId())});
		request.setAttribute("friendList", friendList);	
		
		return mapping.findForward("goSetBestFriendUI");
		
	}
		
	
	public ActionForward goSetBestFriendUI(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		User user=(User) request.getSession().getAttribute("user");
		String fid=request.getParameter("fid");		
		
		List friendList=friendService.getResult("from Friend where hostId=? and user.userId=?", new Object[]{user.getUserId(),Integer.valueOf(fid)});
		request.setAttribute("friendList", friendList);
		
		Friend friend=(Friend)friendList.get(0);
		request.setAttribute("friend", friend);	
		
		return mapping.findForward("goSetBestFriendUI");
	}
		
	
	public ActionForward addFriend(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		 FriendForm friendForm=(FriendForm) form;
		 User user=(User) request.getSession().getAttribute("user");	
		
		// System.out.print(friendForm.getFriendId());
		 
		 Friend friend =new Friend();
		 
		 List getfriend=friendService.getResult("from Friend where hostId=? and user.userId=?", new Object[]{user.getUserId(),friendForm.getFriendId()});
		 if(getfriend.size()==0){
			 friend.setHostId(user.getUserId());
			 User user1=(User) userService.findById(User.class, friendForm.getFriendId());
			 friend.setUser(user1);		 		 
			 friendService.save(friend); 		 
		
		 }
		 		 
		 
		 User friend1=(User) userService.findById(User.class, friendForm.getFriendId());
		 request.setAttribute("friend1", friend1);
		 
		 if(friend1.getCity().getCiId()==21){
				request.setAttribute("city", friend1.getOtherCityName());
			}else{			
				
				City city=(City)cityService.findById(City.class, Integer.valueOf(friend1.getCity().getCiId()));					
				request.setAttribute("city", city.getCiName());
			}
				
			List userUniversity=userUniversityService.getResult("from UserUniversity where user.userId=?", new Object[]{Integer.valueOf(friend1.getUserId())});
			UserUniversity useruniversity=(UserUniversity) userUniversity.get(0);
			request.setAttribute("university", useruniversity.getUniversity().getName());
			
			List albumList=albumService.getResult("from Album where user.userId=?", new Object[]{Integer.valueOf(friend1.getUserId())});
			request.setAttribute("albumList", albumList);
			
			List articleList=articleService.getResult("from Article where user.userId=?", new Object[]{Integer.valueOf(friend1.getUserId())});
			request.setAttribute("articleList", articleList);
			
			List gossipList=gossipService.getResult("from Gossip where getId=?", new Object[]{Integer.valueOf(friend1.getUserId())});
			request.setAttribute("gossipList", gossipList);
			
			List friendList=friendService.getResult("from Friend where hostId=?", new Object[]{Integer.valueOf(friend1.getUserId())});
			request.setAttribute("friendList", friendList);
		 
		 //return mapping.findForward("goShowSearchFriend");
		 return mapping.findForward("goFriendHome");
	}
	
	
	
	public ActionForward viewFriend(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		 String fid=request.getParameter("fid");
		
		 User friend1=(User) userService.findById(User.class, Integer.parseInt(fid));
		 request.setAttribute("friend1", friend1);
		 
		 if(friend1.getCity().getCiId()==21){
				request.setAttribute("city", friend1.getOtherCityName());
			}else{			
				
				City city=(City)cityService.findById(City.class, Integer.valueOf(friend1.getCity().getCiId()));					
				request.setAttribute("city", city.getCiName());
			}
				
			List userUniversity=userUniversityService.getResult("from UserUniversity where user.userId=?", new Object[]{Integer.valueOf(friend1.getUserId())});
			UserUniversity useruniversity=(UserUniversity) userUniversity.get(0);
			request.setAttribute("university", useruniversity.getUniversity().getName());
			
			List albumList=albumService.getResult("from Album where user.userId=?", new Object[]{Integer.valueOf(friend1.getUserId())});
			request.setAttribute("albumList", albumList);
			
			List articleList=articleService.getResult("from Article where user.userId=?", new Object[]{Integer.valueOf(friend1.getUserId())});
			request.setAttribute("articleList", articleList);
			
			List gossipList=gossipService.getResult("from Gossip where getId=?", new Object[]{Integer.valueOf(friend1.getUserId())});
			request.setAttribute("gossipList", gossipList);
			
			List friendList=friendService.getResult("from Friend where hostId=?", new Object[]{Integer.valueOf(friend1.getUserId())});
			request.setAttribute("friendList", friendList);
		
		    return mapping.findForward("goFriendHome");
	}
	

	public void setAlbumService(AlbumServiceInter albumService) {
		this.albumService = albumService;
	}

	public void setArticleService(ArticleServiceInter articleService) {
		this.articleService = articleService;
	}

	public void setGossipService(GossipServiceInter gossipService) {
		this.gossipService = gossipService;
	}

	public void setCityService(CityServiceInter cityService) {
		this.cityService = cityService;
	}

	public void setUserUniversityService(
			UserUniversityServiceInter userUniversityService) {
		this.userUniversityService = userUniversityService;
	}
	
}